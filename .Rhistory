tfruitfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_Fruit.csv"
Fl_data <- read.csv(tfruitfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
row==1~"Control",
row==2~"Transplantation",
row==3~"Germination",
row==4~"Germ+Trans",
TRUE~NA),
fruit = 1,
date_analysis = parse_date_time(date_analysis, orders = "mdy"),
date_harvest = parse_date_time(date_harvest, orders="mdy"),
d_harvest = format(date_harvest, format="%d"),
d_analysis = format(date_analysis, format="%d"),
d_diff = abs(as.integer(d_analysis)-as.integer(d_harvest)),
plant_fac = as.factor(paste(row, plant)),
Treatment = factor(Treatment, levels=c("Control","Germination",
"Transplantation",
"Germ+Trans")),
BER = as.factor(BER),
fungus = as.factor(fungus),
cracking = as.factor(cracking),
ripeness = abs(1-(penetrometer/max(na.omit(penetrometer))))
)
View(Fl_data)
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
tfile <- "C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants/TIP24_LI600.csv"
Li_data <- read.csv(tfile, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
# filter to leak% < 10 and gsw > 0
filter(leak_pct<10, gsw > 0) %>%
mutate(Date = parse_date_time(Date, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans"))
)
Li_data <- Li_data[,c("Obs.", "Treatment", "Time", "Date", "Row", "Pot", "plant_fac", "gsw", "VPDleaf", "PhiPS2", "rh_s", "Tleaf", "Qamb")]
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse); require(lmerTest); require(RColorBrewer); require(hrbrthemes); require(viridis); require(showtext); require(scico); require(pwr)
nl_dat <- file.choose()
nl_dat_file <- file.choose()
nl_dat <- read.csv(nl_dat_file)
View(nl_dat)
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()+
scale_color_scico_d(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=as.factor(treat)))+
geom_point()+
scale_color_scico_d(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()+
scale_color_manual(begin=1, end=0, palette="acton")
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_point()
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_jitter()
nl_dat <- read.csv(nl_dat_file) %>%
mutate(treat = as.factor(treat))
ggplot(nl_dat, aes(x=time, y=od, color=treat))+
geom_jitter()
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
install.packages("drc")
## using drc
drm(od~Asym/(1+exp((xmid-time)/scal)),
curveid=treat, data=nl_dat)
library(drc)
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=LL.3)
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=LL.3())
## using drc
drm(od~time, curveid=treat, data=nl_dat, fct=W2.3())
## using drc
mod2 <- drm(od~time, curveid=treat, data=nl_dat, fct=W2.3())
summary(mod2)
confint(mod2)
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
??rdc
??drc
shiny::runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
runApp('C:/Github/Portfolio/R Shiny Apps/01 Tomato Inoculants')
shiny::runApp('C:/Github/App-A-Day/02_distribution_fitter')
tfile <- "C:/Github/App-A-Day/02_distribution_fitter/eggplant_data.csv"
#test data
data <- read.csv(tfile)
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/02_distribution_fitter')
runApp('C:/Github/App-A-Day/03_scatter')
runApp('C:/Github/App-A-Day/01_meteorites')
# Load Data
#meteorite_file <- "C:/Github/App-A-Day/01_meteorites/Meteorite_Landings.csv"
meteorite_file <- "Meteorite_Landings.csv"
# Load Data
meteorite_file <- "C:/Github/App-A-Day/01_meteorites/Meteorite_Landings.csv"
# Rename variables for clarity and omit NAs
met_dat <- read.csv(meteorite_file) %>%
rename(mass = mass..g.,
lat = reclat,
lon = reclong) %>%
mutate(nametype = as.factor(nametype),
fall = as.factor(fall),
id = as.factor(id)) %>%
filter(mass > 0) %>%
na.omit()
shiny::runApp('C:/Github/App-A-Day/01_meteorites')
install.packages("devtools")
install.packages("roxygen2")
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse); require(lme4); require(showtext); require(scico); require(pwr); require(car); require(ggpubr); require(rstatix); require(ggridges); require(MASS); require(devtools)
## secondary packages (requires devtools)
install_github("zachpeagler/multifit")
require(multifit)
mq_file <- "C:/Github/Portfolio/_data/tomato_inoculants/TIP24/TIP24_Multispeq.csv"
m_data <- read.csv(mq_file) %>%
mutate(Treatment = case_when(
Row=="A"~"Control",
Row=="B"~"Transplantation",
Row=="C"~"Germination",
Row=="D"~"Germ+Trans",
TRUE~NA),
Row_num = case_when(
Row=="A"~ 1,
Row=="B"~ 2,
Row=="C"~ 3,
Row=="D"~ 4,
TRUE~NA),
plant_fac = as.factor(paste(Row_num, Pot))
)
View(m_data)
multiPDF_plot(m_data$Phi2, 100, 'normal','lognormal','gamma')
multiPDF_plot(m_data$Phi2, 100, c('normal','lognormal','gamma'))
mPhi2_ks <- multiKS_cont(m_data$Phi2, 'all')
View(mPhi2_ks)
mPhi2_ks <- multiKS_cont(m_data$Phi2, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$Phi2, 100, c('normal','lognormal','gamma'))
View(m_data)
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma', 'cauchy'))
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma', 'loglogistic'))
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma', 'loglogistic'))
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma'))
FvPFmP_ks <- multiKS_cont(m_data$FvP_over_FmP, c('normal','lognormal','gamma'))
FvPFmP_ks <- multiKS_cont(m_data$FvP_over_FmP, 'all')
View(FvPFmP_ks)
multiPDF_plot(m_data$FvP_over_FmP, 100, 'all')
multiPDF_plot(m_data$FvP_over_FmP, 100, 'all')
multiCDF_plot(m_data$Phi2, 100, c('normal','lognormal','gamma'))
mPhi2_ks <- multiKS_cont(m_data$Phi2, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma', 'cauchy', 'weibull'))
multiCDF_plot(m_data$FvP_over_FmP, 100, c('normal','lognormal','gamma', 'cauchy', 'weibull'))
View(m_data)
multiPDF_plot(m_data$Ambient.Temperature, 100, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$NPQt, 100, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$SPAD, 100, c('normal','lognormal','gamma'))
multiPDF_plot(m_data$SPAD, 100, c('normal','lognormal','gamma'), facet_wrap(~Treatment))
multiPDF_plot(m_data$SPAD, 100, c('normal','lognormal','gamma'))
ggplot(data = m_data, aes(x=Light.Intensity..PAR., y = Phi2,
shape=Treatment, fill=Treatment, color = Treatment)) +
geom_jitter(width=1, size=2, alpha=1)+
scale_color_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_fill_manual(values=four_colors)+
ylim(.6,.8)+
theme_minimal()+
ylab("PhiPS2")+
xlab("Ambient Light")+
labs(
title=str_wrap("Photosystem II Efficiency By Ambient Light Across Inoculation Treatment in Tomato", 50)
)+
theme(
text = element_text(size=24, family="mont"),
legend.title = element_text(size=24, family="mont", face="bold"),
legend.text = element_text(size=20, family="mont"),
legend.position="inside",
legend.title.position = "top",
legend.position.inside=c(0.15,0.2),
legend.key.height = unit(.3, "cm"),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
a_palette <- "bilbao"
## it's a good idea to use n+1 for palettes as often the last color is white (invisible against the default background)
two_colors = scico(3, palette=a_palette)
four_colors = scico(5, palette=a_palette)
five_colors = scico(6, palette=a_palette)
true_two_col = scico(2, palette=a_palette)
ten_col = scico(10, palette=a_palette)
twelve_col = scico(13, palette=a_palette)
font_add_google("Open Sans", family = "open")
font_add_google("Montserrat", family = "mont")
showtext_auto()
four_shapes = c(15,16,17,23)
ggplot(data = m_data, aes(x=Light.Intensity..PAR., y = Phi2,
shape=Treatment, fill=Treatment, color = Treatment)) +
geom_jitter(width=1, size=2, alpha=1)+
scale_color_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_fill_manual(values=four_colors)+
ylim(.6,.8)+
theme_minimal()+
ylab("PhiPS2")+
xlab("Ambient Light")+
labs(
title=str_wrap("Photosystem II Efficiency By Ambient Light Across Inoculation Treatment in Tomato", 50)
)+
theme(
text = element_text(size=24, family="mont"),
legend.title = element_text(size=24, family="mont", face="bold"),
legend.text = element_text(size=20, family="mont"),
legend.position="inside",
legend.title.position = "top",
legend.position.inside=c(0.15,0.2),
legend.key.height = unit(.3, "cm"),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
ggplot(data = m_data, aes(x=Light.Intensity..PAR., y = Phi2,
shape=Treatment, fill=Treatment, color = Treatment)) +
geom_jitter(width=1, size=2, alpha=1)+
scale_color_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_fill_manual(values=four_colors)+
ylim(.6,.8)+
theme_minimal()+
ylab("PhiPS2")+
xlab("Ambient Light")+
labs(
title=str_wrap("Photosystem II Efficiency By Ambient Light Across Inoculation Treatment in Tomato", 50)
)+
theme(
text = element_text(size=24, family="mont"),
legend.title = element_text(size=24, family="mont", face="bold"),
legend.text = element_text(size=20, family="mont"),
legend.position="inside",
legend.key.height = unit(.3, "cm"),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
ggplot(data = m_data, aes(x=Light.Intensity..PAR., y = Phi2,
shape=Treatment, fill=Treatment, color = Treatment)) +
geom_jitter(width=1, size=2, alpha=1)+
scale_color_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_fill_manual(values=four_colors)+
ylim(.6,.8)+
theme_minimal()+
ylab("PhiPS2")+
xlab("Ambient Light")+
labs(
title=str_wrap("Photosystem II Efficiency By Ambient Light Across Inoculation Treatment in Tomato", 50)
)+
theme(
text = element_text(size=24, family="mont"),
legend.title = element_text(size=24, family="mont", face="bold"),
legend.text = element_text(size=20, family="mont"),
legend.key.height = unit(.3, "cm"),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
ggplot(data = m_data, aes(x=Light.Intensity..PAR., y = Phi2,
shape=Treatment, fill=Treatment, color = Treatment)) +
geom_jitter(width=1, size=2, alpha=1)+
scale_color_manual(values=four_colors)+
scale_shape_manual(values=four_shapes)+
scale_fill_manual(values=four_colors)+
theme_minimal()+
ylab("PhiPS2")+
xlab("Ambient Light")+
labs(
title=str_wrap("Photosystem II Efficiency By Ambient Light Across Inoculation Treatment in Tomato", 50)
)+
theme(
text = element_text(size=24, family="mont"),
legend.title = element_text(size=24, family="mont", face="bold"),
legend.text = element_text(size=20, family="mont"),
legend.key.height = unit(.3, "cm"),
legend.background = element_rect(color=four_colors[3], fill=NA,
linewidth=.5, linetype = 2),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
## PhiPS2 Density Graph by plant
ggplot(data=m_data, aes(x=PhiP, y = plant_fac, color=Treatment, fill=Treatment))+
geom_density_ridges()+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
xlim(.6,.8)+
ylab("Density")+
xlab("Stomatal Conductance (mol m-2 s-1)")+
theme_minimal()+
labs(
title=str_wrap("Photosystem II Efficiency Density for Different Tomato Plants by Treatment", 40)
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", lineheight = 0.5),
axis.title.y = element_text(size=0),
axis.text.x = element_text(size=24, family="mont"),
axis.text = element_text(size=12, family="mont"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## PhiPS2 Density Graph by plant
ggplot(data=m_data, aes(x=Phi2, y = plant_fac, color=Treatment, fill=Treatment))+
geom_density_ridges()+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
xlim(.6,.8)+
ylab("Density")+
xlab("Stomatal Conductance (mol m-2 s-1)")+
theme_minimal()+
labs(
title=str_wrap("Photosystem II Efficiency Density for Different Tomato Plants by Treatment", 40)
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", lineheight = 0.5),
axis.title.y = element_text(size=0),
axis.text.x = element_text(size=24, family="mont"),
axis.text = element_text(size=12, family="mont"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
## PhiPS2 Density Graph by plant
ggplot(data=m_data, aes(x=Phi2, y = plant_fac, color=Treatment, fill=Treatment))+
geom_density_ridges()+
scale_fill_manual(values=four_colors)+
scale_color_manual(values=four_colors)+
ylab("Density")+
xlab("Stomatal Conductance (mol m-2 s-1)")+
theme_minimal()+
labs(
title=str_wrap("Photosystem II Efficiency Density for Different Tomato Plants by Treatment", 40)
)+
theme(
legend.position="right",
text = element_text(size=24, family="mont", lineheight = 0.5),
axis.title.y = element_text(size=0),
axis.text.x = element_text(size=24, family="mont"),
axis.text = element_text(size=12, family="mont"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold")
)
# check for heteroscedasticity
leveneTest(m_data$Phi2~m_data$Treatment)
leveneTest(m_data$FvP_over_FmP~m_data$Treatment)
## Load and clean Li-600 data
Li_data_file <- "C:/Github/Portfolio/_data/tomato_inoculants/TIP24/TIP24_LI600.csv"
Li_data <- read.csv(Li_data_file, stringsAsFactors = T) %>%
mutate(Treatment = case_when(
Row==1~"Control",
Row==2~"Transplantation",
Row==3~"Germination",
Row==4~"Germ+Trans",
TRUE~NA)) %>%
filter(leak_pct<10, gsw>0) %>%
rename(Date_ref = Date) %>%
mutate(Date = parse_date_time(Date_ref, orders = "mdy"),
plant_fac = as.factor(paste(Row, Pot)),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans")),
loggsw = log(gsw)
)
# check for heteroscedasticity
leveneTest(Li_data$gsw~Li_data$Treatment)
leveneTest(Li_data$PhiPS2~Li_data$Treatment)
leveneTest(m_data$FvP_over_FmP~m_data$Treatment)
# check for heteroscedasticity
leveneTest(m_data$Phi2~m_data$Treatment)
leveneTest(log(m_data$Phi2)~m_data$Treatment)
#' No extremes
#'
#' This function returns a dataframe subsetted to not include observations that
#' are beyond the extremes of the specified variable.
#'
#' Extremes are calculated using the IQR.
#' @param df The dataframe to subset
#' @param x The variable to subset by
#' @export
no_extremes <- function(df, x) {
# get quantiles
Qx <- quantile(x, probs=c(.25, .75), na.rm=FALSE)
# get IQR
iqr_x <- IQR(x)
# subset df
df <- subset(df, x > (Qx[1]-3.0*iqr_x) &
x < (Qx[2]+3.0*iqr_x))
return(df)
}
no_extremes(Li_data, gsw)
no_extremes(Li_data, Li_data$gsw)
LiTest <- no_extremes(Li_data, Li_data$gsw)
LiTest <- no_extremes(Li_data, Li_data$PhiPS2)
#' No outliers
#'
#' This function returns a dataframe subsetted to not include observations that
#' are beyond the outliers of the specified variable.
#'
#' Outliers are defined by the quantiles +- 1.5 times the interquartile range.
#'
#' @param df The dataframe to subset
#' @param x The variable to subset by
#' @export
no_outliers <- function(df, x) {
# get quantiles
Qx <- quantile(x, probs=c(.25, .75), na.rm=FALSE)
# get IQR
iqr_x <- IQR(x)
# subset df
df <- subset(df, x > (Qx[1]-1.5*iqr_x) &
x < (Qx[2]+1.5*iqr_x))
return(df)
}
LiTest2 <- no_outliers(Li_data, Li_data$PhiPS2)
LiTest2 <- no_outliers(Li_data, Li_data$gsw)
gsw
is.na(gsw)
exists(gsw)
devtools::document()
devtools::create()
devtools::create("C:/Github/multiFitRplotly")
devtools::document()
setwd("C:/Github/multiFitRplotly")
devtools::document()
setwd("C:/Github/multiFitR")
devtools::document()
devtools::document()
devtools::create("C:/Github/multiFitRgg")
setwd("C:/Github/multiFitRgg")
devtools::document()
setwd("C:/Github/multiFitR")
devtools::document()
shiny::runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
#distributions
dists <- c("normal", "lognormal", "gamma", "exponential",
"cauchy", "weibull")
library(multiFitRgg)
runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
## Fluoro interactive scatter plot
output$fluoro_scatter <- renderPlot({
fs <- ggplot(data = RLi_data(), aes(x=.data[[Rfluoro_x()]], y = .data[[Rfluoro_y()]],
color = .data[[Rfluoro_col()]])) +
geom_jitter(width=Rfluoro_jit())+
scale_color_scico(begin=0.8, end=0, palette=Rpalette())+
scale_x_discrete(guide=guide_axis(check.overlap=TRUE))+
theme_minimal()+
ylab(gettext(Rfluoro_y()))+
xlab(gettext(Rfluoro_x()))+
theme(
text = element_text(size=24, family="mont"),
axis.title = element_text(size=24, family = "mont", face= "bold"),
title = element_text(size=30, family="open", face="bold", lineheight = .5)
)
if (Rfluoro_fwrap() ==TRUE){
fs <- fs + facet_wrap(~Treatment)
}
return(fs)
})
runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
setwd("C:/Github/Portfolio/Apps/tomato_inoculant_app")
## multispeq data
m_data_file <- "TIP24_Multispeq.csv"
m_data <- read.csv(m_data_file) %>%
mutate(Treatment = case_when(
Row=="A"~"Control",
Row=="B"~"Transplantation",
Row=="C"~"Germination",
Row=="D"~"Germ+Trans",
TRUE~NA),
Treatment = factor(Treatment, levels=c("Control", "Germination",
"Transplantation", "Germ+Trans")),
Row_num = case_when(
Row=="A"~ 1,
Row=="B"~ 2,
Row=="C"~ 3,
Row=="D"~ 4,
TRUE~NA),
plant_fac = as.factor(paste(Row_num, Pot)),
Date = as.Date(time, "%m/%d/%Y"),
Date = as.factor(Date),
)
runApp()
setwd("C:/Github/multiFitRgg")
devtools::document()
runApp('C:/Github/Portfolio/Apps/tomato_inoculant_app')
